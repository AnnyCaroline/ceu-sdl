#ifdef CEU_TIMEMACHINE
input int SDL_DT;
global do
#endif

#ifndef ALL

#include "sdl.ceu";

input void SDL_QUIT;
input void SDL_REDRAW;

native do
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end

var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("SDL - 03 (class)",
                _SDL_WINDOWPOS_UNDEFINED, _SDL_WINDOWPOS_UNDEFINED,
                640, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
    end

_SDL_GetWindowSize(&win, &_REN_W, &_REN_H);

finalize
    _REN = _SDL_CreateRenderer(&win, -1, 0);
with
    _SDL_DestroyRenderer(_REN);
end

#else

_SDL_SetWindowTitle(&win, "SDL - 03 (class)");

#endif

#ifdef CEU_TIMEMACHINE
end
#endif

class Rect with
    var _SDL_Renderer&? ren;
    var _SDL_Rect r;
    var int dt;
do
    this.r.x = 100;
    this.r.w =  20;
    this.r.h =  20;

    par do
        every (this.dt)ms do
            this.r.x = this.r.x + 1;
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&this.ren, 0xFF,0xFF,0xFF,0xFF);
            _SDL_RenderFillRect(&this.ren, &r);
        end
    end
end

par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN, 0x00,0x00,0x00, 0xFF);
        _SDL_RenderFillRect(_REN, null);
    end
with
    var Rect r1 with
        this.ren = _REN;
        this.r.y = 100;
        this.dt  =  15;
    end;
    var Rect r2 with
        this.ren = _REN;
        this.r.y = 300;
        this.dt  =  10;
    end;
    await FOREVER;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
with
    await SDL_QUIT;
end

escape 0;
