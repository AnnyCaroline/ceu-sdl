include sdl.ceu;

native do
    int ORGS = 0;       // count the number of alive rectangles
end

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;

/* Create SDL_Window (Destroy on finalization) */

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("SDL 8",
                            500, 1300, 1024, 768, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

/* Create SDL_Renderer (Destroy on finalization) */

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

var int win_w;
var int win_h;
_SDL_GetWindowSize(win, &win_w, &win_h);
var _SDL_Rect bg;
    bg.w = win_w;
    bg.h = win_h;
    bg.x = 0;
    bg.y = 0;

/* Maximum of 10k Rectangles on a dedicated memory pool */

class [10000] Rect with
    var _SDL_Rect  rct;         // My initial values
    var int        vel;         // I have a speed set from outside
    var _SDL_Renderer* ren;     // I redraw myself
do
    this.rct.w = 10;
    this.rct.h = 10;

    var int x = rct.x;

    /* count the number of alive rectangles */
    _ORGS = _ORGS + 1;          // increment on init
        finalize with
            _ORGS = _ORGS - 1;  // decrement on finalization
        end;

    var _SDL_Color clr;         // color varies periodically
        clr.r = 0xFF;
        clr.g = 0xFF;
        clr.b = 0xFF;

    par/or do
        every 200ms do
            this.rct.h = rct.h + _rand()%5 - 2;     // random height
            if rct.h <= 0 then
                rct.h = 1;
            end

            this.rct.w = rct.w + _rand()%5 - 2;     // random width
            if rct.w <= 0 then
                rct.w = 1;
            end

            clr.r = clr.r + _rand()%5 - 2;          // random r/g/b
            clr.g = clr.g + _rand()%5 - 2;
            clr.b = clr.b + _rand()%5 - 2;
        end
    with
        var s32 dt;
        var _float fx = x;

        every dt=SDL_DT do
            fx = fx + (_float)(this.vel*dt)/1000;   // update my position
            rct.x = fx;

            /* When the rectangle reaches the end of screen, escape the "every".
             * This will terminate the "par/or", which will terminate
             *  organism.
             * The "finalize" will also execute on termination.
             */
            if rct.x > 950 then
                break;
            end
        end
    with
        /* redraw myself every frame */
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(ren, clr.r,clr.g,clr.b,0xFF);
            _SDL_RenderFillRect(ren, &rct);
        end
    end
end

par/or do
    await SDL_QUIT;                     // terminates everything
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(ren, 0,0,0, 0xFF);
        _SDL_RenderFillRect(ren, &bg);  // DRAW 1: clear screen
    end
with
    loop do
        par/or do
            await 30s;                  // kill all rectangles and restart
        with
            do
                every 40ms do
                    loop i, 30 do       // create 30 rectangles every 40ms
                        spawn Rect with
                            this.vel   = 50 + _rand()%20;
                            this.rct.x = 50;
                            this.rct.y = _rand()%750;
                            this.ren = ren;
                        end;
                    end
                end
            end                         // DRAW 2: (all rectangles react here)
        end
    end
with
    loop do
        await SDL_REDRAW;
        _SDL_RenderPresent(ren);        // DRAW 3: update screen
    end
with
    /* calculate FPS */
    loop do
        var int c = 0;
        par/or do
            every SDL_REDRAW do
                c = c + 1;
            end
        with
            await 1s;
        end
        _printf("[FPS=%d] [orgs=%d]\n", c, _ORGS);
    end
end

return 0;
