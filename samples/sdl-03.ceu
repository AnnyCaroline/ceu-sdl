#include "sdl.ceu"

native _rand;

//input void SDL_REDRAW;

code/delayed Rect (var& _SDL_Renderer_ptr ren, var SDL_Rect rect, var int speed) => void do
    par/or do
        loop do
            await (1000/speed) ms;
            rect.x = rect.x + 3;
            if rect.x > 500 then
                break;
            end
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(ren, 0xFF,0xFF,0xFF,0xFF);
            _SDL_RenderFillRect(ren, &&rect as _SDL_Rect&&);
        end
    end
end

watching SDL_go("SDL 3", 800,480) => (ren) do
    par do
        var SDL_Rect rct = val SDL_Rect(0,0 , 800,480);
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(ren, 0x00,0x00,0x00,0xFF);
            _SDL_RenderFillRect(ren, &&rct as _SDL_Rect&&);
        end
    with
        loop do
            watching 10s do
                pool[5] Rect rs;
                every 1s do
                    spawn Rect(&ren, SDL_Rect(100,50+_rand()%380,20,20), 25)
                            in rs;
                end
            end
        end
    with
        every SDL_REDRAW do
            _SDL_RenderPresent(ren);
        end
    end
end

escape 0;
