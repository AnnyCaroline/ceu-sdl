#include "sdl.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

var int win_w;
var int win_h;
var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("SDL 4",
                            500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

_SDL_GetWindowSize(win, &win_w, &win_h);

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

var _SDL_Rect bg;
    bg.w = win_w;
    bg.h = win_h;
    bg.x = 0;
    bg.y = 0;

var _SDL_Color bg_clr;
    bg_clr.r = 0x00;
    bg_clr.g = 0x00;
    bg_clr.b = 0x00;

class Rect with
    var _SDL_Rect  rct;
    var int        dt;

    var _SDL_Renderer* ren;
do
    this.rct.w = 20;
    this.rct.h = 20;

    var _SDL_Color clr;
        clr.r = 0xFF;
        clr.g = 0xFF;
        clr.b = 0xFF;

    event int go_pause;

    par/or do
        pause/if go_pause do
            loop do
                await (this.dt) ms;
                rct.x = rct.x + 1;
                if rct.x > 500 then
                    break;
                end
            end
        end
    with
        var bool paused? = false;
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONDOWN;
            if but:button == _SDL_BUTTON_LEFT then
                if _SDL_Rect_vs_Mouse(&rct, but) then
                    paused? = not paused?;
                    emit go_pause => paused?;
                end
            end
        end
    with
        loop do
            await SDL_REDRAW;
            _SDL_SetRenderDrawColor(ren, clr.r,clr.g,clr.b,0xFF);
            _SDL_RenderFillRect(ren, &rct);
        end
    end
    //await FOREVER;    // disappears but remains on memory
end

event int go_pause_all;

par/or do
    await SDL_QUIT;
with
    loop do
        await SDL_REDRAW;
        _SDL_SetRenderDrawColor(ren, bg_clr.r,bg_clr.g,bg_clr.b,0xFF);
        _SDL_RenderFillRect(ren, &bg);
    end
with
    loop do
        par/or do
            pause/if go_pause_all do
                do
                    pool Rect[] rs;
                    loop do
                        await 1s;
                        native _rand();
                        spawn Rect in rs with
                            _.dt    =  10 + _rand()%20;
                            _.rct.x = 100;
                            _.rct.y = 100 + _rand()%300;
                            _.ren := ren;
                        end;
                    end
                end
            end
        with
            var int paused? = false;
            loop do
                var _SDL_KeyboardEvent* key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_ESCAPE then
                    break;
                else/if key:keysym.sym == _SDLK_p then
                    paused? = not paused?;
                    emit go_pause_all => paused?;
                end
            end
        end
    end
with
    loop do
        await SDL_REDRAW;
        _SDL_RenderPresent(ren);
    end
end

escape 0;
