native do
    //##include "SDL2/SDL_net.h"
end

_SDL_Init(0);
    finalize with
        _SDL_Quit();
    end

_SDLNet_Init();
    finalize with
        _SDLNet_Quit();
    end

input void SDL_QUIT;

par/or do
    await SDL_QUIT;
with
    await 1s;
    loop v do
        var int ret;
        var int* pret = &ret;

        par/or do
            // CLIENT 1
            async thread (v, pret) do
                var _IPaddress ip;
                _assert(_SDLNet_ResolveHost(&ip, "localhost", 2222) == 0);

                var _TCPsocket sock = _SDLNet_TCP_Open(&ip);
                _assert(sock != null);

                _sleep(2);

                var _char x = v;
                var int   len;
                len = _SDLNet_TCP_Send(sock, &x, 1);
                _assert(len == 1);
                len = _SDLNet_TCP_Recv(sock, &x, 1);

                _printf("1 - ASYNC - %d\n", x);
                _SDLNet_TCP_Close(sock);

                sync do
                    _printf("1 - SYNC - %d\n", x);
                    *pret = 100 + x;
                end
            end
            _printf("1 - WINS - %d\n", *pret);
        with
            // CLIENT 2
            async thread (v, pret) do
                var _IPaddress ip;
                _assert(_SDLNet_ResolveHost(&ip, "localhost", 2222) == 0);

                var _TCPsocket sock = _SDLNet_TCP_Open(&ip);
                _assert(sock != null);

                _sleep(2);

                var _char x = v;
                var int   len;
                len = _SDLNet_TCP_Send(sock, &x, 1);
                _assert(len == 1);
                len = _SDLNet_TCP_Recv(sock, &x, 1);

                _printf("2 - ASYNC - %d\n", x);
                _SDLNet_TCP_Close(sock);

                sync do
                    _printf("2 - SYNC - %d\n", x);
                    *pret = 200 + x;
                end
            end
            _printf("2 - WINS - %d\n", *pret);
        end

        _printf("LOOP: %d\n\n\n", ret);
    end
with
    // SERVER
_printf("3\n");
    async thread
    do
_printf("C\n");
        var _IPaddress srv_ip;
_printf("1\n");
        _assert(_SDLNet_ResolveHost(&srv_ip, null, 2222) == 0);
_printf("2\n");

        var _TCPsocket srv = _SDLNet_TCP_Open(&srv_ip);
_printf("3\n");
        _assert(srv != null);
_printf("4\n");

        loop do
_printf("5 %p\n", srv);
            var _TCPsocket clt = _SDLNet_TCP_Accept(srv);
_printf("6\n");
            if clt == null then
                _sleep(1);
                continue;
            end
            var _IPaddress* clt_ip = _SDLNet_TCP_GetPeerAddress(clt);
            if clt_ip == null then
                _sleep(1);
                continue;
            end

            var _char v;
            var int len = _SDLNet_TCP_Recv(clt, &v, 1);
            v = v + 1;
            _SDLNet_TCP_Send(clt, &v, 1);

            _SDLNet_TCP_Close(clt);
        end
    end
end

return 0;
