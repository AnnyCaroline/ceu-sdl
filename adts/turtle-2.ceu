#include "sdl.ceu"
#include "sdl-gfx.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;

var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("Logo", _SDL_WINDOWPOS_CENTERED,
                                        _SDL_WINDOWPOS_CENTERED,
                                        400, 400,
                                        _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
    end

var int w, h;
_SDL_GetWindowSize(&win, &w, &h);
var SDL_Rect bg = SDL_Rect(0,0 , w,h);

var _SDL_Renderer&? ren;
    finalize
        ren = _SDL_CreateRenderer(&win, -1, 0);
    with
        _SDL_DestroyRenderer(&ren);
    end

data Command with
    tag NOTHING;
or
    tag AWAIT with
        var int ms;
    end
or
    tag RIGHT with
        var int d_angle;
    end
or
    tag LEFT with
        var int d_angle;
    end
or
    tag FORWARD with
        var int d_pixels;
    end
or
    tag BACKWARD with
        var int d_pixels;
    end
or
    tag SEQUENCE with
        var Command* one;
        var Command* two;
    end
or
    tag REPEAT with
        var int      times;
        var Command* command;
    end
or
    tag PAROR with
        var Command* one;
        var Command* two;
    end
end

// TODO: aceitar estatico
pool Command[] cmds;

#define DO1SEC(x) Command.PAROR(Command.AWAIT(1000), x)
#define SEQ8(a,b,c,d,e,f,g,h)               \
    Command.SEQUENCE(a,                     \
        Command.SEQUENCE(b,                 \
            Command.SEQUENCE(c,             \
                Command.SEQUENCE(d,         \
                    Command.SEQUENCE(e,     \
                        Command.SEQUENCE(f, \
                            Command.SEQUENCE(g,h)))))))

cmds = new SEQ8(
            Command.AWAIT(1000),
            DO1SEC(Command.FORWARD(150)),
            Command.AWAIT(1000),
            DO1SEC(Command.RIGHT(180)),
            Command.AWAIT(1000),
            DO1SEC(Command.FORWARD(150)),
            Command.AWAIT(1000),
            Command.PAROR(
                Command.AWAIT(10000),
                Command.PAROR(
                    Command.RIGHT(180),
                    Command.FORWARD(100))));

class Turtle with
    var _SDL_Renderer&  ren;
    var SDL_Point       pos   = SDL_Point(200,200);
    var int             angle = 180;
do
    every SDL_REDRAW do
        _filledCircleRGBA(&ren, pos.x,pos.y, 25,
                                0x00,0xAA,0x00,0xFF);

        var int x = this.pos.x + 25*_sin(angle/(180.0/_M_PI));
        var int y = this.pos.y + 25*_cos(angle/(180.0/_M_PI));
        _filledCircleRGBA(&ren, x,y, 8,
                                0x00,0x00,0x00,0xFF);
    end
end

class TurtleTurn with
    var Turtle& turtle;
    var int     d_angle;
    var int     isRight;
do
    var int inc;
    if isRight then
        if d_angle < 0 then
            d_angle = -d_angle;
            inc = 1;
        else
            inc = -1;
        end
    else
        if d_angle < 0 then
            d_angle = -d_angle;
            inc = -1;
        else
            inc = 1;
        end
    end

    var float sum = turtle.angle;
    every dt in SDL_DT do
        sum = sum + dt*inc*d_angle*0.001;
        turtle.angle = sum;
    end
end

class TurtleMove with
    var Turtle& turtle;
    var int     d_pixels;
    var int     isForward;
do
    var int inc;
    if isForward then
        inc =  1;
    else
        inc = -1;
    end

    var float sum = 0;
    var float x = turtle.pos.x;
    var float y = turtle.pos.y;
    every dt in SDL_DT do
        var float mul = d_pixels * dt * 0.001 * this.inc;
        var float dx  = mul * _sin(turtle.angle/(180.0/_M_PI));
        var float dy  = mul * _cos(turtle.angle/(180.0/_M_PI));
        sum = sum + _fabs(dx) + _fabs(dy);
        x = x + dx;
        y = y + dy;
        turtle.pos.x = x;
        turtle.pos.y = y;
    end

end

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&ren, 0xFF,0xFF,0xFF, 0xFF);
        _SDL_RenderFillRect(&ren, (_SDL_Rect*)&bg);
    end
with
    var Turtle turtle with
        this.ren = ren;
    end;

    loop/rec cmd in cmds do
        watching cmd do
            if cmd:NOTHING then
                nothing;

            else/if cmd:AWAIT then
                await (cmd:AWAIT.ms) ms;

            else/if cmd:RIGHT or cmd:LEFT then
                var int d_angle;
                if cmd:RIGHT then
                    d_angle = cmd:RIGHT.d_angle;
                else
                    d_angle = cmd:LEFT.d_angle;
                end
                do TurtleTurn with
                    this.turtle  = turtle;
                    this.d_angle = d_angle;
                    this.isRight = cmd:RIGHT;
                end;

            else/if cmd:FORWARD or cmd:BACKWARD then
                var int d_pixels;
                if cmd:FORWARD then
                    d_pixels = cmd:FORWARD.d_pixels;
                else
                    d_pixels = cmd:BACKWARD.d_pixels;
                end
                do TurtleMove with
                    this.turtle    = turtle;
                    this.d_pixels  = d_pixels;
                    this.isForward = cmd:FORWARD;
                end;

            else/if cmd:PAROR then
                par/or do
                    recurse cmd:PAROR.one;
                with
                    recurse cmd:PAROR.two;
                end

            else/if cmd:SEQUENCE then
                recurse cmd:SEQUENCE.one;
                recurse cmd:SEQUENCE.two;

            else/if cmd:REPEAT then
                loop i in cmd:REPEAT.times do
                    recurse cmd:REPEAT.command;
                end

            else
                _ceu_out_assert(0, "not implemented");
            end
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&ren);
    end
end

escape 1;
