#ifndef _UI_CEU
#define _UI_CEU

#include "sdl.ceu"

native/const _UI_ALIGN_LEFT, _UI_ALIGN_CENTER, _UI_ALIGN_RIGHT,
             _UI_ALIGN_TOP,  _UI_ALIGN_MIDDLE, _UI_ALIGN_BOTTOM;

native/pure _UI_align, _UI_align_bg;

native/pos do

    enum {
        UI_ALIGN_LEFT = 0,
        UI_ALIGN_CENTER,
        UI_ALIGN_RIGHT
    };
    enum {
        UI_ALIGN_TOP = 0,
        UI_ALIGN_MIDDLE,
        UI_ALIGN_BOTTOM,
    };

    int UI_align (int p, int dim, int align)
    {
        switch (align)
        {
            case UI_ALIGN_LEFT:
            //case UI_ALIGN_TOP:
                return p;

            case UI_ALIGN_CENTER:
            //case UI_ALIGN_MIDDLE:
                return p - dim/2;

            case UI_ALIGN_RIGHT:
            //case UI_ALIGN_BOTTOM:
                return p - dim;
        }
    }

    int UI_align_bg (int p_out, int dim_out, int dim_in, int align)
    {
        switch (align)
        {
            case UI_ALIGN_LEFT:
            //case UI_ALIGN_TOP:
                return p_out;

            case UI_ALIGN_CENTER:
            //case UI_ALIGN_MIDDLE:
                return p_out + (dim_out - dim_in)/2;

            case UI_ALIGN_RIGHT:
            //case UI_ALIGN_BOTTOM:
                return p_out + (dim_out - dim_in);
        }
    }
end

data Ui with
    event void       ok_clicked;
    var   SDL_Rect   rect;
    var   SDL_Color? bg_clr;
end

code/delayed Ui_go (var& _SDL_Renderer_ptr ren, var& Ui ui) => void do
    par do
        loop do
            var _SDL_MouseButtonEvent&& but1 =
                await SDL_MOUSEBUTTONDOWN
                until _SDL_Rect_vs_Mouse((&&ui.rect as _SDL_Rect&&), but1) as bool;

            var _SDL_MouseButtonEvent&& but2 = await SDL_MOUSEBUTTONUP;
            if _SDL_Rect_vs_Mouse((&&ui.rect as _SDL_Rect&&), but2) as bool then
                emit ui.ok_clicked;
            end
        end
    with
        every SDL_REDRAW do
            if ui.bg_clr? then
                _boxRGBA(ren, ui.rect.x,ui.rect.y,
                             ui.rect.x+ui.rect.w,ui.rect.y+ui.rect.h,
                             ui.bg_clr!.r, ui.bg_clr!.g, ui.bg_clr!.b, ui.bg_clr!.a);
            end
        end
    end
end

#ifdef TEST_UI_CEU

var SDL_Color bg = val SDL_Color(0x00,0x00,0x00,0xFF);

watching SDL_go("UI", 800,480, bg) => (ren) do
    var Ui ui = val Ui(_, SDL_Rect(100,100,100,100),
                          SDL_Color(0xFF,0xFF,0xFF,0xFF));
    watching Ui_go(&ren, &ui) do
        every ui.ok_clicked do
            ui.rect.x = ui.rect.x + 10;
        end
    end
end

escape 0;

#endif

#endif
