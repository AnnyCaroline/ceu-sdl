#ifndef _SDL_CEU
#define _SDL_CEU

native/const _GL_SCISSOR_TEST, _GL_TEXTURE_2D;
native _glEnable, _glDisable, _glScissor;

native/plain  _SDL_Rect, _SDL_Point, _SDL_Color,
              _SDL_MouseButtonEvent,
              _SDL_KeyboardEvent,
              _SDL_Renderer,
              _SDL_TouchFingerEvent,
              _SDL_Texture,
              _SDL_Window;

native/const  _SDL_TRUE, _SDL_FALSE,
              _SDL_BLENDMODE_NONE, _SDL_BLENDMODE_BLEND,
              _SDL_BUTTON_LEFT,
              _SDL_BUTTON_RIGHT,
              _SDL_INIT_EVERYTHING,
              _SDL_KEYDOWN,
              _SDL_MOUSEBUTTONDOWN,
              _SDL_PIXELFORMAT_UNKNOWN,
              _SDL_SCANCODE_AC_BACK,
              _SDL_RENDERER_ACCELERATED,
              _SDL_RENDERER_PRESENTVSYNC,
              _SDL_TEXTINPUT,
              _SDL_TEXTUREACCESS_STATIC,
              _SDL_TEXTUREACCESS_TARGET,
              _SDL_WINDOW_SHOWN,
              _SDL_WINDOW_RESIZABLE,
              _SDL_WINDOWEVENT_RESIZED,
              _SDL_WINDOWPOS_CENTERED,
              _AUDIO_S16SYS;

native/const  _SDLK_ESCAPE,
              _SDLK_BACKSPACE,
              _SDLK_RETURN,
              _SDLK_SEMICOLON,
              _SDLK_UP,
              _SDLK_DOWN,
              _SDLK_LEFT,
              _SDLK_RIGHT,
              _SDLK_a,
              _SDLK_d,
              _SDLK_s,
              _SDLK_w,
              _SDLK_z,
              _SDLK_p;

native/nohold _SDL_GL_BindTexture,
              _SDL_CreateRenderer,
              _SDL_CreateSoftwareRenderer,
              _SDL_CreateTexture,
              _SDL_CreateTextureFromSurface,
              _SDL_CreateWindow,
              _SDL_Delay,
              _SDL_DestroyRenderer,
              _SDL_DestroyTexture,
              _SDL_DestroyWindow,
              _SDL_FreeSurface,
              _SDL_GetMouseState,
              _SDL_GetRendererInfo,
              _SDL_GetRendererOutputSize,
              _SDL_GetWindowSize,
              _SDL_HasIntersection,
              _SDL_Init,
              _SDL_QueryTexture,
              _SDL_Quit,
              _SDL_RenderClear,
              _SDL_RenderCopy,
              _SDL_RenderDrawLine,
              _SDL_RenderDrawRect,
              _SDL_RenderFillRect,
              _SDL_RenderPresent,
              _SDL_SetEventFilter,
              _SDL_SetRenderDrawBlendMode,
              _SDL_SetRenderDrawColor,
              _SDL_SetRenderTarget,
              _SDL_SetTextInputRect,
              _SDL_SetWindowDisplayMode,
              _SDL_SetWindowFullscreen,
              _SDL_SetWindowTitle,
              _SDL_StartTextInput,
              _SDL_StopTextInput,
              _IMG_LoadTexture,
              _Mix_CloseAudio,
              _Mix_FreeChunk,
              _Mix_FreeMusic,
              _Mix_LoadWAV,
              _Mix_OpenAudio,
              _Mix_PlayChannel,
              _Mix_Playing,
              _Mix_PlayMusic,
              _TTF_CloseFont,
              _TTF_Init,
              _TTF_OpenFont,
              _TTF_Quit,
              _TTF_RenderText_Blended,
              _TTF_RenderText_Shaded,
              _TTF_RenderText_Solid,
              _TTF_SizeText,
              _TTF_WasInit;

native/nohold _bezierRGBA,
              _boxColor,
              _boxRGBA,
              _circleColor,
              _circleRGBA,
              _filledCircleColor,
              _filledCircleRGBA,
              _filledPolygonRGBA,
              _lineRGBA,
              _pixelRGBA,
              _polygonColor,
              _polygonRGBA,
              _rectangleRGBA,
              _roundedBoxRGBA,
              _roundedRectangleRGBA,
              _stringColor,
              _stringRGBA,
              _thickLineRGBA;

native/nohold _SDL_Circle_vs_Mouse,
              _SDL_Circle_vs_Point,
              _SDL_Circle_vs_Circle,
              _SDL_Rect_vs_Mouse,
              _SDL_Rect_vs_Point,
              _SDL_Rect2Point,
              _SDL_Point2Rect,
              _SDL_Touch2Point;

native
    _SDL_GetTicks,
;

native _SDL_Window_ptr, _SDL_Renderer_ptr, _Mix_Chunk_ptr, _SDL_Texture_ptr,
       _TTF_Font_ptr, _SDL_Surface_ptr;

native/pre do
    ##include <SDL2/SDL.h>
    ##include <SDL2/SDL_image.h>
    ##include <SDL2/SDL_mixer.h>
    ##include <SDL2/SDL_ttf.h>
    ##include <SDL2/SDL2_gfxPrimitives.h>

    typedef SDL_Window*   SDL_Window_ptr;
    typedef SDL_Renderer* SDL_Renderer_ptr;
    typedef Mix_Chunk*    Mix_Chunk_ptr;
    typedef SDL_Texture*  SDL_Texture_ptr;
    typedef TTF_Font*     TTF_Font_ptr;
    typedef SDL_Surface*  SDL_Surface_ptr;

    int SDL_Rect_vs_Mouse (SDL_Rect* r, SDL_MouseButtonEvent* but) {
        return (but->x >= r->x) && (but->x <= r->x+r->w)
            && (but->y >= r->y) && (but->y <= r->y+r->h);
    }
    int SDL_Rect_vs_Point (SDL_Rect* r, SDL_Point* pt) {
        return (pt->x >= r->x) && (pt->x <= r->x+r->w)
            && (pt->y >= r->y) && (pt->y <= r->y+r->h);
    }
    SDL_Point* SDL_Touch2Point (SDL_Point* pt, SDL_TouchFingerEvent* e, int w, int h) {
        pt->x = e->x * w;
        pt->y = e->y * h;
        return pt;
    }

    SDL_Point SDL_Rect2Point (SDL_Rect* r) {
        SDL_Point pt = { r->x+r->w/2, r->y+r->h/2 };
        return pt;
    }
    SDL_Rect SDL_Point2Rect (SDL_Point* pt, int radix) {
        SDL_Rect r = { pt->x-radix, pt->y-radix, radix*2, radix*2 };
        return r;
    }

##ifdef SDL_MATH
    int SDL_Circle_vs_Mouse (SDL_Point* pos, int rad, SDL_MouseButtonEvent* but) {
        SDL_Point pt = { but->x, but->y };
        return SDL_Circle_vs_Point(pos, rad, &pt);
    }

    int SDL_Circle_vs_Point (SDL_Point* pos, int rad, SDL_Point* pt) {
        return (pow(pos->x-pt->x,2) + pow(pos->y-pt->y,2)) <= pow(rad+rad,2);
    }

    int SDL_Circle_vs_Circle (SDL_Point* pos1, int rad1, SDL_Point* pos2, int rad2) {
        return (pow(pos1->x-pos2->x,2) + pow(pos1->y-pos2->y,2))
                <= pow(rad1+rad2,2);
    }
##endif
end

native/pos do
    ##define ceu_callback_env(cmd,evt,params) ceu_sdl_callback(cmd,evt,params)

    u32 old;
    s32 wclock_min = CEU_WCLOCK_INACTIVE;

    void ceu_sdl_init (void) {
        old = SDL_GetTicks();
    }

    void ceu_sdl_step (void) {
        SDL_Event evt;
        //int has = SDL_PollEvent(&evt);
        int has = SDL_WaitEventTimeout(&evt, 30);

        // WCLOCK / SDL_DT
        {
            u32 now = SDL_GetTicks();
            s32 dt_ms = (now - old);
            s32 dt_us = dt_ms*1000;
            ceu_dbg_assert(dt_ms >= 0);
            old = now;

            ceu_go_ext(CEU_INPUT__WCLOCK, &dt_us);
            while (wclock_min <= 0) {
                dt_us = 0;
                ceu_go_ext(CEU_INPUT__WCLOCK, &dt_us);
            }

            ceu_go_ext(CEU_INPUT_SDL_DT, &dt_ms);
        }

        // OTHER EVENTS
        if (has) {
            SDL_Event* evtp = &evt;
            switch (evt.type) {
                case SDL_QUIT:
                    ceu_go_ext(CEU_INPUT_SDL_QUIT, &evtp);
                    break;
                case SDL_KEYDOWN:
                    ceu_go_ext(CEU_INPUT_SDL_KEYDOWN, &evtp);
                    break;
                case SDL_KEYUP:
                    ceu_go_ext(CEU_INPUT_SDL_KEYUP, &evtp);
                    break;
                case SDL_MOUSEBUTTONDOWN:
                    ceu_go_ext(CEU_INPUT_SDL_MOUSEBUTTONDOWN, &evtp);
                    break;
                case SDL_MOUSEBUTTONUP:
                    ceu_go_ext(CEU_INPUT_SDL_MOUSEBUTTONUP, &evtp);
                    break;
            }
        }

        // SDL_REDRAW
        {
            SDL_Renderer*  ren = NULL;
            SDL_Renderer** ren_ = &ren;
            ceu_go_ext(CEU_INPUT_SDL_REDRAW, &ren_);
            if (ren != NULL) {
                SDL_RenderPresent(ren);
            }
        }
    }

    tceu_callback_ret ceu_sdl_callback (int cmd, tceu_callback_arg p1, tceu_callback_arg p2)
    {
        tceu_callback_ret ret;

        switch (cmd) {
            case CEU_CALLBACK_INIT:
                ret.is_handled = 1;
                ceu_sdl_init();
                break;
            case CEU_CALLBACK_STEP:
                ret.is_handled = 1;
                ceu_sdl_step();
                break;
            case CEU_CALLBACK_WCLOCK_MIN:
                ret.is_handled = 1;
                wclock_min = p1.num;
                break;
            default:
                ret.is_handled = 0;
        }

        return ret;
    }
end

data SDL_Color with
    var u8 r;
    var u8 g;
    var u8 b;
    var u8 a;
end

data SDL_Point with
    var int x;
    var int y;
end

data SDL_Rect with
    var int x;
    var int y;
    var int w;
    var int h;
end

data SDL_Texture with
    var& _SDL_Texture_ptr ptr;
    var int width;
    var int height;
end

input void SDL_QUIT;
input int  SDL_DT;
input _SDL_Renderer&&&& SDL_REDRAW;
input _SDL_KeyboardEvent&&    SDL_KEYDOWN,         SDL_KEYUP;
input _SDL_MouseButtonEvent&& SDL_MOUSEBUTTONDOWN, SDL_MOUSEBUTTONUP;

code/await SDL_go (var _char&& title,
                   var int width, var int height,
                   var SDL_Color? bg)
                    => (var& _SDL_Renderer_ptr ren)
                        => void
do
    var int err = _SDL_Init(_SDL_INIT_EVERYTHING);
    _ceu_callback_assert_msg(err == 0, "SDL_Init failed");
        do finalize with
            _SDL_Quit();
        end

    var& _SDL_Window_ptr? win_ =
        &_SDL_CreateWindow(title,
                           _SDL_WINDOWPOS_CENTERED, _SDL_WINDOWPOS_CENTERED,
                           width, height,
                           _SDL_WINDOW_SHOWN)
            finalize (win_) with
                _SDL_DestroyWindow(win_!);
            end

    var& _SDL_Renderer_ptr? ren__ =
        &_SDL_CreateRenderer(win_!, -1, 0)
            finalize (ren__) with
                _SDL_DestroyRenderer(ren__!);
            end
    var& _SDL_Renderer_ptr ren_ = &ren__!;
    ren = &ren_;

    _TTF_Init();
        do finalize with
            _TTF_Quit();
        end

    _Mix_OpenAudio(22050, _AUDIO_S16SYS, 2, 4096);
        do finalize with
            _Mix_CloseAudio();
        end

#if 1
    watching SDL_QUIT do
        par do
            var SDL_Color bg_ = _;
            if bg? then
                bg_ = bg!;
            end
            var _SDL_Renderer_ptr&& ptr_ptr;
            every ptr_ptr in SDL_REDRAW do
                *ptr_ptr = ren_;
                if bg? then
                    _SDL_SetRenderDrawColor(ren_, bg_.r,bg_.g,bg_.b,bg_.a);
                    _SDL_RenderClear(ren_);
                end
            end
        with
#   if 0
            loop do
                var int n = 0;
                var u32 old = _SDL_GetTicks();
                watching 1s do
                    every SDL_DT do
                        n = n + 1;
                    end
                end;
                var u32 now = _SDL_GetTicks();
                _printf(">>> FPS: %d [%dms]\n", n, now-old);
            end
#   else
            await FOREVER;
#   endif
        end
    end
#else
    await SDL_QUIT;
#endif
end

code/await SDL_open_texture
            (var& _SDL_Renderer_ptr ren, var _char&& path)
                => (var& SDL_Texture tex)
                    => void
do
    var& _SDL_Texture_ptr? tex__ = &_IMG_LoadTexture(ren, path)
        finalize (tex__) with
            _SDL_DestroyTexture(tex__!);
        end

    var SDL_Texture tex_ = val SDL_Texture(&tex__!, _, _);
    _SDL_QueryTexture(tex_.ptr, null, null, &&tex_.width, &&tex_.height);
    tex = &tex_;

    await FOREVER;
end

code/await SDL_open_font (var _char&& path, var int size)
                            => (var& _TTF_Font_ptr font)
                                => void
do
    var& _TTF_Font_ptr? font_ =
        &_TTF_OpenFont(path, size)
            finalize (font_) with
                if _TTF_WasInit() as bool then
                    _TTF_CloseFont(font_!);
                end
            end;
    font = &font_!;
    await FOREVER;
end

code/await SDL_new_text
            (var& _SDL_Renderer_ptr ren, var& _TTF_Font_ptr font,
             var _char&& text, var SDL_Color color)
                => (var& SDL_Texture tex)
                    => void
do
    var& _SDL_Texture_ptr? tex__;
    do
        var _SDL_Color c = _;
                       c.r = color.r;
                       c.g = color.g;
                       c.b = color.b;
                       c.a = color.a;

        var& _SDL_Surface_ptr? sfc =
            &_TTF_RenderText_Blended(font, text, c)
                finalize (sfc) with
                    _SDL_FreeSurface(sfc!);
                end

        do
            tex__ = &_SDL_CreateTextureFromSurface(ren, sfc!);
        finalize (tex__) with
            //_SDL_DestroyTexture(tex__!);
        end
    end
    do finalize with
        _SDL_DestroyTexture(tex__!);
    end

    var SDL_Texture tex_ = val SDL_Texture(&tex__!, _, _);
    _SDL_QueryTexture(tex_.ptr, null, null, &&tex_.width, &&tex_.height);
    tex = &tex_;

    await FOREVER;
end

code/await SDL_open_sound (var _char&& path)
                            => (var& _Mix_Chunk_ptr sound)
                                => void
do
    var& _Mix_Chunk_ptr? sound_ = &_Mix_LoadWAV(path)
        finalize (sound_) with
            _Mix_FreeChunk(sound_!);
        end
    sound = &sound_!;
    await FOREVER;
end

#endif
