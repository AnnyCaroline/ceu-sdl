#include "sdl.ceu"
#include "sdl-gfx.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;

var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("Logo", _SDL_WINDOWPOS_CENTERED,
                                        _SDL_WINDOWPOS_CENTERED,
                                        400, 400,
                                        _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
    end

var int w, h;
_SDL_GetWindowSize(&win, &w, &h);
var SDL_Rect bg = SDL_Rect(0,0 , w,h);

var _SDL_Renderer&? ren;
    finalize
        ren = _SDL_CreateRenderer(&win, -1, 0);
    with
        _SDL_DestroyRenderer(&ren);
    end

data Command with
    tag NOTHING;
or
    tag RIGHT with
        var int angle;
    end
or
    tag LEFT with
        var int angle;
    end
or
    tag FORWARD with
        var int pixels;
    end
or
    tag BACKWARD with
        var int pixels;
    end
or
    tag AWAIT with
        var int ms;
    end
or
    tag SEQUENCE with
        var Command* one;
        var Command* two;
    end
or
    tag REPEAT with
        var int      times;
        var Command* command;
    end
end

// TODO: aceitar estatico
pool Command[] cmds;

cmds = new Command.REPEAT(2,
            Command.SEQUENCE(
                Command.AWAIT(1000),
                Command.SEQUENCE(
                    Command.RIGHT(45),
                    Command.SEQUENCE(
                        Command.FORWARD(100),
                        Command.SEQUENCE(
                            Command.LEFT(90),
                            Command.SEQUENCE(
                                Command.FORWARD(100),
                                Command.SEQUENCE(
                                    Command.RIGHT(45),
                                    Command.BACKWARD(100))))))));

class Turtle with
    var _SDL_Renderer&  ren;
    var SDL_Point       pos   = SDL_Point(200,200);
    var int             angle = 180;
do
    every SDL_REDRAW do
        _filledCircleRGBA(&ren, pos.x,pos.y, 25,
                                0x00,0xAA,0x00,0xFF);

        var int x = this.pos.x + 25*_sin(angle/(180.0/_M_PI));
        var int y = this.pos.y + 25*_cos(angle/(180.0/_M_PI));
        _filledCircleRGBA(&ren, x,y, 8,
                                0x00,0x00,0x00,0xFF);
    end
end

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&ren, 0xFF,0xFF,0xFF, 0xFF);
        _SDL_RenderFillRect(&ren, (_SDL_Rect*)&bg);
    end
with
    var Turtle turtle with
        this.ren = ren;
    end;

    loop cmd in cmds do
        watching cmd do
            if cmd:NOTHING then
                nothing;

            else/if cmd:SEQUENCE then
                recurse cmd:SEQUENCE.one;
                recurse cmd:SEQUENCE.two;

            else/if cmd:REPEAT then
                loop i in cmd:REPEAT.times do
                    recurse/1 cmd:REPEAT.command;
                end

            else/if cmd:AWAIT then
                await (cmd:AWAIT.ms) ms;

            else/if cmd:RIGHT or cmd:LEFT then
                var int tot;
                var int inc;
                if cmd:RIGHT then
                    if cmd:RIGHT.angle < 0 then
                        tot = -cmd:RIGHT.angle;
                        inc = 1;
                    else
                        tot = cmd:RIGHT.angle;
                        inc = -1;
                    end
                else
                    if cmd:LEFT.angle < 0 then
                        tot = -cmd:LEFT.angle;
                        inc = -1;
                    else
                        tot = cmd:LEFT.angle;
                        inc = 1;
                    end
                end
                loop i in tot do
                    await 10ms;
                    turtle.angle = turtle.angle + inc;
                end

            else/if cmd:FORWARD or cmd:BACKWARD then
                var int inc;
                var int tot;
                if cmd:FORWARD then
                    tot =  cmd:FORWARD.pixels;
                    inc =  1;
                else
                    tot =  cmd:BACKWARD.pixels;
                    inc = -1;
                end
                _assert(tot > 0);

                var float sum = 0;
                var float x = turtle.pos.x;
                var float y = turtle.pos.y;
                every dt in SDL_DT do
                    if sum >= tot then
                        break;
                    end
                    var float mul = 80 * dt * 0.001 * inc;
                    var float dx  = mul * _sin(turtle.angle/(180.0/_M_PI));
                    var float dy  = mul * _cos(turtle.angle/(180.0/_M_PI));
                    sum = sum + _fabs(dx) + _fabs(dy);
                    x = x + dx;
                    y = y + dy;
                    turtle.pos.x = x;
                    turtle.pos.y = y;
                end

            else
                _ceu_out_assert(0, "not implemented");
            end
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&ren);
    end
end

escape 1;
